package DistributedAuctionApp;


/**
* DistributedAuctionApp/DistributedAuctionPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from DistributedAuctionApp.idl
* Sunday, March 11, 2018 9:34:59 PM CDT
*/

public abstract class DistributedAuctionPOA extends org.omg.PortableServer.Servant
 implements DistributedAuctionApp.DistributedAuctionOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("offerItem", new java.lang.Integer (0));
    _methods.put ("viewHighBidder", new java.lang.Integer (1));
    _methods.put ("viewAuctionStatus", new java.lang.Integer (2));
    _methods.put ("viewBidStatus", new java.lang.Integer (3));
    _methods.put ("bid", new java.lang.Integer (4));
    _methods.put ("sell", new java.lang.Integer (5));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {
       case 0:  // DistributedAuctionApp/DistributedAuction/offerItem
       {
         try {
           String itemName = in.read_string ();
           String userID = in.read_string ();
           double startPrice = in.read_double ();
           boolean $result = false;
           $result = this.offerItem (itemName, userID, startPrice);
           out = $rh.createReply();
           out.write_boolean ($result);
         } catch (DistributedAuctionApp.DistributedAuctionPackage.IncorrectOfferException $ex) {
           out = $rh.createExceptionReply ();
           DistributedAuctionApp.DistributedAuctionPackage.IncorrectOfferExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 1:  // DistributedAuctionApp/DistributedAuction/viewHighBidder
       {
         try {
           String userID = in.read_string ();
           String $result = null;
           $result = this.viewHighBidder (userID);
           out = $rh.createReply();
           out.write_string ($result);
         } catch (DistributedAuctionApp.DistributedAuctionPackage.IncorrectSellException $ex) {
           out = $rh.createExceptionReply ();
           DistributedAuctionApp.DistributedAuctionPackage.IncorrectSellExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 2:  // DistributedAuctionApp/DistributedAuction/viewAuctionStatus
       {
         try {
           String userID = in.read_string ();
           DistributedAuctionApp.DistributedAuctionPackage.AuctionStatus $result = null;
           $result = this.viewAuctionStatus (userID);
           out = $rh.createReply();
           DistributedAuctionApp.DistributedAuctionPackage.AuctionStatusHelper.write (out, $result);
         } catch (DistributedAuctionApp.DistributedAuctionPackage.IncorrectStatusException $ex) {
           out = $rh.createExceptionReply ();
           DistributedAuctionApp.DistributedAuctionPackage.IncorrectStatusExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 3:  // DistributedAuctionApp/DistributedAuction/viewBidStatus
       {
         try {
           String userID = in.read_string ();
           String $result = null;
           $result = this.viewBidStatus (userID);
           out = $rh.createReply();
           out.write_string ($result);
         } catch (DistributedAuctionApp.DistributedAuctionPackage.IncorrectBidException $ex) {
           out = $rh.createExceptionReply ();
           DistributedAuctionApp.DistributedAuctionPackage.IncorrectBidExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 4:  // DistributedAuctionApp/DistributedAuction/bid
       {
         try {
           String userID = in.read_string ();
           double price = in.read_double ();
           boolean $result = false;
           $result = this.bid (userID, price);
           out = $rh.createReply();
           out.write_boolean ($result);
         } catch (DistributedAuctionApp.DistributedAuctionPackage.IncorrectBidException $ex) {
           out = $rh.createExceptionReply ();
           DistributedAuctionApp.DistributedAuctionPackage.IncorrectBidExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 5:  // DistributedAuctionApp/DistributedAuction/sell
       {
         try {
           String userID = in.read_string ();
           boolean $result = false;
           $result = this.sell (userID);
           out = $rh.createReply();
           out.write_boolean ($result);
         } catch (DistributedAuctionApp.DistributedAuctionPackage.IncorrectSellException $ex) {
           out = $rh.createExceptionReply ();
           DistributedAuctionApp.DistributedAuctionPackage.IncorrectSellExceptionHelper.write (out, $ex);
         }
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:DistributedAuctionApp/DistributedAuction:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public DistributedAuction _this() 
  {
    return DistributedAuctionHelper.narrow(
    super._this_object());
  }

  public DistributedAuction _this(org.omg.CORBA.ORB orb) 
  {
    return DistributedAuctionHelper.narrow(
    super._this_object(orb));
  }


} // class DistributedAuctionPOA
