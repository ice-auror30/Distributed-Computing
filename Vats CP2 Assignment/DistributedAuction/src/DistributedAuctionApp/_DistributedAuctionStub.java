package DistributedAuctionApp;


/**
* DistributedAuctionApp/_DistributedAuctionStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from DistributedAuctionApp.idl
* Sunday, March 11, 2018 5:21:02 PM CDT
*/

public class _DistributedAuctionStub extends org.omg.CORBA.portable.ObjectImpl implements DistributedAuctionApp.DistributedAuction
{

  public boolean offerItem (String itemName, String userID, double startPrice) throws DistributedAuctionApp.DistributedAuctionPackage.IncorrectOfferException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("offerItem", true);
                $out.write_string (itemName);
                $out.write_string (userID);
                $out.write_double (startPrice);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:DistributedAuctionApp/DistributedAuction/IncorrectOfferException:1.0"))
                    throw DistributedAuctionApp.DistributedAuctionPackage.IncorrectOfferExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return offerItem (itemName, userID, startPrice        );
            } finally {
                _releaseReply ($in);
            }
  } // offerItem

  public String viewHighBidder (String userID) throws DistributedAuctionApp.DistributedAuctionPackage.IncorrectSellException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("viewHighBidder", true);
                $out.write_string (userID);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:DistributedAuctionApp/DistributedAuction/IncorrectSellException:1.0"))
                    throw DistributedAuctionApp.DistributedAuctionPackage.IncorrectSellExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return viewHighBidder (userID        );
            } finally {
                _releaseReply ($in);
            }
  } // viewHighBidder

  public DistributedAuctionApp.DistributedAuctionPackage.AuctionStatus viewAuctionStatus (String userID) throws DistributedAuctionApp.DistributedAuctionPackage.IncorrectStatusException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("viewAuctionStatus", true);
                $out.write_string (userID);
                $in = _invoke ($out);
                DistributedAuctionApp.DistributedAuctionPackage.AuctionStatus $result = DistributedAuctionApp.DistributedAuctionPackage.StatusHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:DistributedAuctionApp/DistributedAuction/IncorrectStatusException:1.0"))
                    throw DistributedAuctionApp.DistributedAuctionPackage.IncorrectStatusExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return viewAuctionStatus (userID        );
            } finally {
                _releaseReply ($in);
            }
  } // viewAuctionStatus

  public String viewBidStatus (String userID) throws DistributedAuctionApp.DistributedAuctionPackage.IncorrectBidException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("viewBidStatus", true);
                $out.write_string (userID);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:DistributedAuctionApp/DistributedAuction/IncorrectBidException:1.0"))
                    throw DistributedAuctionApp.DistributedAuctionPackage.IncorrectBidExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return viewBidStatus (userID        );
            } finally {
                _releaseReply ($in);
            }
  } // viewBidStatus

  public boolean bid (String userID, double price) throws DistributedAuctionApp.DistributedAuctionPackage.IncorrectBidException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("bid", true);
                $out.write_string (userID);
                $out.write_double (price);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:DistributedAuctionApp/DistributedAuction/IncorrectBidException:1.0"))
                    throw DistributedAuctionApp.DistributedAuctionPackage.IncorrectBidExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return bid (userID, price        );
            } finally {
                _releaseReply ($in);
            }
  } // bid

  public boolean sell (String userID) throws DistributedAuctionApp.DistributedAuctionPackage.IncorrectSellException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("sell", true);
                $out.write_string (userID);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:DistributedAuctionApp/DistributedAuction/IncorrectSellException:1.0"))
                    throw DistributedAuctionApp.DistributedAuctionPackage.IncorrectSellExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return sell (userID        );
            } finally {
                _releaseReply ($in);
            }
  } // sell

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:DistributedAuctionApp/DistributedAuction:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     org.omg.CORBA.Object obj = orb.string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
   } finally {
     orb.destroy() ;
   }
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     String str = orb.object_to_string (this);
     s.writeUTF (str);
   } finally {
     orb.destroy() ;
   }
  }
} // class _DistributedAuctionStub
